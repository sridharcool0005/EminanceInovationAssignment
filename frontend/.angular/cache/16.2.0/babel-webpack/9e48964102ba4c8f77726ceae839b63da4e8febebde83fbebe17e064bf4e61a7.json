{"ast":null,"code":"import { HttpRequest, HttpHandler } from \"@angular/common/http\";\nimport { tap } from 'rxjs/operators';\nimport { Router } from \"@angular/router\";\nimport { UserService } from \"../shared/user.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/user.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  var _class;\n  class AuthInterceptor {\n    constructor(userService, router) {\n      this.userService = userService;\n      this.router = router;\n    }\n    intercept(req, next) {\n      if (req.headers.get('noauth')) return next.handle(req.clone());else {\n        const clonedreq = req.clone({\n          headers: req.headers.set(\"Authorization\", \"Bearer \" + this.userService.getToken())\n        });\n        return next.handle(clonedreq).pipe(tap(event => {}, err => {\n          if (err.error.auth == false) {\n            this.router.navigateByUrl('/login');\n          }\n        }));\n      }\n    }\n  }\n  _class = AuthInterceptor;\n  _class.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}